{"version":3,"sources":["../../../src/commands/utils/npm.ts"],"names":["cachedFetch","FileSystemCache","cacheDirectory","getCacheFilePath","sanitizeNpmPackageName","name","applyKnownNpmPackageNameRules","test","substring","toLowerCase","replace","normalize","npmPackAsync","packageName","cwd","undefined","props","cmd","cmdString","join","Log","debug","results","stdout","trim","JSON","parse","error","Error","message","pipeline","Stream","downloadAndExtractNpmModuleAsync","npmName","cachePath","fs","ensureDir","filename","cacheFilename","path","stat","catch","isFile","extractLocalNpmTarballAsync","tarFilePath","readStream","createReadStream","extractNpmTarballAsync","UserSettings","dotExpoHomeDirectory","createUrlStreamAsync","url","response","ok","statusText","body","extractNpmTarballFromUrlAsync","stream","strip","fileList","tar","extract","transform","onentry"],"mappings":"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","sourcesContent":["import { JSONArray, JSONObject, JSONValue } from '@expo/json-file';\nimport spawnAsync from '@expo/spawn-async';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport slugify from 'slugify';\nimport { Stream } from 'stream';\nimport tar from 'tar';\nimport { promisify } from 'util';\nimport { UserSettings } from 'xdl';\n\nimport Log from '../../log';\nimport { createEntryResolver, createFileTransform } from './createFileTransform';\nimport { FileSystemCache } from './fetch-cache/FileSystemCache';\nimport createFetchWithCache from './fetch-cache/fetch';\n\nconst cachedFetch = createFetchWithCache(\n  new FileSystemCache({\n    cacheDirectory: getCacheFilePath(),\n    // Time to live. How long (in ms) responses remain cached before being automatically ejected. If undefined, responses are never automatically ejected from the cache.\n    // ttl: 1000,\n  })\n);\n\nexport function sanitizeNpmPackageName(name: string): string {\n  // https://github.com/npm/validate-npm-package-name/#naming-rules\n  return (\n    applyKnownNpmPackageNameRules(name) ||\n    applyKnownNpmPackageNameRules(slugify(name)) ||\n    // If nothing is left use 'app' like we do in Xcode projects.\n    'app'\n  );\n}\n\nfunction applyKnownNpmPackageNameRules(name: string): string | null {\n  // https://github.com/npm/validate-npm-package-name/#naming-rules\n\n  // package name cannot start with '.' or '_'.\n  while (/^(\\.|_)/.test(name)) {\n    name = name.substring(1);\n  }\n\n  name = name.toLowerCase().replace(/[^a-zA-Z0-9._\\-/@]/g, '');\n\n  return (\n    name\n      // .replace(/![a-z0-9-._~]+/g, '')\n      // Remove special characters\n      .normalize('NFD')\n      .replace(/[\\u0300-\\u036f]/g, '') || null\n  );\n}\n\nexport async function npmPackAsync(\n  packageName: string,\n  cwd: string | undefined = undefined,\n  ...props: string[]\n): Promise<JSONValue> {\n  const cmd = ['pack', packageName, ...props];\n\n  const cmdString = `npm ${cmd.join(' ')}`;\n  Log.debug('Run:', cmdString);\n  const results = (await spawnAsync('npm', [...cmd, '--json'], { cwd })).stdout?.trim();\n\n  if (!results) {\n    return null;\n  }\n  try {\n    return JSON.parse(results);\n  } catch (error: any) {\n    throw new Error(\n      `Could not parse JSON returned from \"${cmdString}\".\\n\\n${results}\\n\\nError: ${error.message}`\n    );\n  }\n}\n\n// @ts-ignore\nconst pipeline = promisify(Stream.pipeline);\n\nexport async function downloadAndExtractNpmModuleAsync(\n  npmName: string,\n  props: ExtractProps\n): Promise<void> {\n  Log.debug(`Looking for tarball for ${npmName} in ${getCacheFilePath()}...`);\n  try {\n    const cachePath = getCacheFilePath();\n    await fs.ensureDir(cachePath);\n    // Perform dry-run to get actual filename for resolved version\n    const filename = (((await npmPackAsync(\n      npmName,\n      cachePath,\n      '--dry-run'\n    )) as JSONArray)[0] as JSONObject).filename as string;\n\n    const cacheFilename = path.join(cachePath, filename);\n\n    // TODO: This cache does not expire, but neither does the FileCache at the top of this file.\n    if (!(await fs.stat(cacheFilename).catch(() => null))?.isFile() ?? false) {\n      Log.debug(`Downloading tarball for ${npmName} to ${cachePath}...`);\n      await npmPackAsync(npmName, cachePath);\n    }\n    await extractLocalNpmTarballAsync(cacheFilename, {\n      cwd: props.cwd,\n      name: props.name,\n    });\n  } catch (error) {\n    Log.error('Error downloading and extracting template package:', error);\n  }\n}\n\nexport async function extractLocalNpmTarballAsync(\n  tarFilePath: string,\n  props: ExtractProps\n): Promise<void> {\n  const readStream = fs.createReadStream(tarFilePath);\n  await extractNpmTarballAsync(readStream, props);\n}\n\ntype ExtractProps = {\n  name: string;\n  cwd: string;\n  strip?: number;\n  fileList?: string[];\n};\n\nfunction getCacheFilePath() {\n  return path.join(UserSettings.dotExpoHomeDirectory(), 'template-cache');\n}\n\nasync function createUrlStreamAsync(url: string) {\n  const response = await cachedFetch(url);\n  if (!response.ok) {\n    throw new Error(`Unexpected response: ${response.statusText}. From url: ${url}`);\n  }\n\n  return response.body;\n}\n\nexport async function extractNpmTarballFromUrlAsync(\n  url: string,\n  props: ExtractProps\n): Promise<void> {\n  await extractNpmTarballAsync(await createUrlStreamAsync(url), props);\n}\n\nexport async function extractNpmTarballAsync(\n  stream: NodeJS.ReadableStream,\n  props: ExtractProps\n): Promise<void> {\n  const { cwd, strip, name, fileList = [] } = props;\n\n  await fs.ensureDir(cwd);\n\n  return pipeline(\n    stream,\n    tar.extract(\n      {\n        cwd,\n        transform: createFileTransform(name),\n        onentry: createEntryResolver(name),\n        strip: strip ?? 1,\n      },\n      fileList\n    )\n  );\n}\n"],"file":"npm.js"}