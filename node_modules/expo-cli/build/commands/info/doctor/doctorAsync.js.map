{"version":3,"sources":["../../../../src/commands/info/doctor/doctorAsync.ts"],"names":["validateSupportPackagesAsync","sdkVersion","versionsForSdk","supportPackagesToValidate","pkg","version","name","Log","newLine","actionAsync","projectRoot","options","exp","getConfig","Versions","gteSdkVersion","areDepsValid","validateDependenciesVersionsAsync","fixDependencies","Doctor","validateExpoServersAsync","validateWithNetworkAsync","NO_ISSUES","log","chalk","green","process","exitCode"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAMA,eAAeA,4BAAf,CAA4CC,UAA5C,EAAgE;AAC9D,QAAMC,cAAc,GAAG,MAAM,wDAAwBD,UAAxB,CAA7B;AAEA,QAAME,yBAAyB,GAAG,CAChC,0BADgC,EAEhC,sBAFgC,EAGhC,uBAHgC,CAAlC;;AAMA,OAAK,MAAMC,GAAX,IAAkBD,yBAAlB,EAA6C;AAC3C,UAAME,OAAO,GAAGH,cAAc,CAACE,GAAD,CAA9B;;AACA,QAAIC,OAAJ,EAAa;AACX,YAAM,+CAA+B;AAAEC,QAAAA,IAAI,EAAEF,GAAR;AAAaC,QAAAA;AAAb,OAA/B,CAAN;AACD;AACF;;AACDE,iBAAIC,OAAJ;AACD;;AAEM,eAAeC,WAAf,CAA2BC,WAA3B,EAAgDC,OAAhD,EAAkE;AACvE,QAAM,gCAAN;AAEA,QAAM;AAAEC,IAAAA,GAAF;AAAOR,IAAAA;AAAP,MAAe,oCAAcS,mBAAd,EAAyBH,WAAzB,CAArB,CAHuE,CAKvE;;AACA,MAAII,gBAASC,aAAT,CAAuBH,GAAvB,EAA4B,QAA5B,CAAJ,EAA2C;AACzC,UAAMZ,4BAA4B,CAACY,GAAG,CAACX,UAAL,CAAlC;AACD;;AAED,QAAMe,YAAY,GAAG,MAAM,oCAAcC,iEAAd,EACzBP,WADyB,EAEzBE,GAFyB,EAGzBR,GAHyB,EAIzBO,OAAO,CAACO,eAJiB,CAA3B,CAVuE,CAiBvE;;AACA,QAAMC,cAAOC,wBAAP,CAAgCV,WAAhC,CAAN;;AAEA,MAAI,CAAC,MAAMS,cAAOE,wBAAP,CAAgCX,WAAhC,CAAP,MAAyDS,cAAOG,SAAhE,IAA6EN,YAAjF,EAA+F;AAC7FT,mBAAIgB,GAAJ,CAAQC,iBAAMC,KAAN,CAAa,6CAAb,CAAR;AACD,GAFD,MAEO;AACLC,IAAAA,OAAO,CAACC,QAAR,GAAmB,CAAnB;AACD;AACF","sourcesContent":["import { getConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport { Doctor, Versions } from 'xdl';\n\nimport Log from '../../../log';\nimport { getRemoteVersionsForSdk } from '../../../utils/getRemoteVersionsForSdk';\nimport { profileMethod } from '../../utils/profileMethod';\nimport { validateDependenciesVersionsAsync } from '../../utils/validateDependenciesVersions';\nimport { warnAboutDeepDependenciesAsync } from './depedencies/explain';\nimport { warnUponCmdExe } from './windows';\n\ntype Options = {\n  fixDependencies?: boolean;\n};\n\nasync function validateSupportPackagesAsync(sdkVersion: string) {\n  const versionsForSdk = await getRemoteVersionsForSdk(sdkVersion);\n\n  const supportPackagesToValidate = [\n    'expo-modules-autolinking',\n    '@expo/config-plugins',\n    '@expo/prebuild-config',\n  ];\n\n  for (const pkg of supportPackagesToValidate) {\n    const version = versionsForSdk[pkg];\n    if (version) {\n      await warnAboutDeepDependenciesAsync({ name: pkg, version });\n    }\n  }\n  Log.newLine();\n}\n\nexport async function actionAsync(projectRoot: string, options: Options) {\n  await warnUponCmdExe();\n\n  const { exp, pkg } = profileMethod(getConfig)(projectRoot);\n\n  // Only use the new validation on SDK +45.\n  if (Versions.gteSdkVersion(exp, '45.0.0')) {\n    await validateSupportPackagesAsync(exp.sdkVersion!);\n  }\n\n  const areDepsValid = await profileMethod(validateDependenciesVersionsAsync)(\n    projectRoot,\n    exp,\n    pkg,\n    options.fixDependencies\n  );\n\n  // note: this currently only warns when something isn't right, it doesn't fail\n  await Doctor.validateExpoServersAsync(projectRoot);\n\n  if ((await Doctor.validateWithNetworkAsync(projectRoot)) === Doctor.NO_ISSUES && areDepsValid) {\n    Log.log(chalk.green(`ðŸŽ‰ Didn't find any issues with the project!`));\n  } else {\n    process.exitCode = 1;\n  }\n}\n"],"file":"doctorAsync.js"}